from datetime import datetime
import telebot
from telebot import types
from sqlalchemy.orm import sessionmaker
from src.database import engine
from src.models import Elective, Review
from sqlalchemy import select
from src.config import TOKEN
from sqlalchemy.orm import joinedload
from googletrans import Translator

bot = telebot.TeleBot(TOKEN, parse_mode='None')
translator = Translator()

user_elective_selections = {}
user_languages = {}
user_reviews = {}

Session = sessionmaker(bind=engine)


def translate_message(text, language):
    return translator.translate(text, dest='en').text if language == 'en' else text


def send_translated_message(chat_id, message, language):
    bot.send_message(chat_id, translate_message(message, language))


def get_language(chat_id):
    return user_languages.get(chat_id, 'ru')


def show_electives(electives, language):
    response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–∫—Ç–∏–≤—ã:\n" + "\n".join(f"- {elective.unique_id}: {elective.name}" for elective in electives)
    return translate_message(response, language)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    language = user_languages.setdefault(chat_id, 'ru')
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —ç–ª–µ–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å –≤ –Ω–∞—à–µ–º –≤—É–∑–µ. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∫ —ç–ª–µ–∫—Ç–∏–≤–∞–º\n"
        "- –£–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
        "- –û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –∫—É—Ä—Å–µ\n"
        "- –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è (–†—É—Å—Å–∫–∏–π –∏–ª–∏ English)\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /electives –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ /language –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –æ–±—â–µ–Ω–∏—è."
    )
    send_translated_message(chat_id, welcome_message, language)


@bot.callback_query_handler(func=lambda call: call.data.startswith('set_language_'))
def set_language(call):
    chat_id = call.message.chat.id
    language = call.data.split('_')[-1]
    user_languages[chat_id] = language
    confirmation = "Language changed to English." if language == 'en' else "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π."
    bot.send_message(chat_id, confirmation)


@bot.message_handler(commands=['language'])
def choose_language(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='set_language_ru'))
    markup.add(types.InlineKeyboardButton("English", callback_data='set_language_en'))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)


@bot.message_handler(commands=['electives'])
def choose_elective_type(message):
    chat_id = message.chat.id
    language = get_language(chat_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìö PEP", callback_data='PEP'))
    markup.add(types.InlineKeyboardButton("üìñ RIM", callback_data='RIM'))
    elective_choice_message = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–∫—Ç–∏–≤–æ–≤:" if language == 'ru' else "Choose the type of electives:"
    bot.send_message(chat_id, elective_choice_message, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ['PEP', 'RIM'])
def handle_elective_type_selection(call):
    chat_id = call.message.chat.id
    user_elective_selections[chat_id] = call.data
    language = get_language(chat_id)

    with Session() as session:
        electives = session.query(Elective).filter(Elective.elective_type == call.data).all()

    response = show_electives(electives, language)
    elective_prompt = "\n\n–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —ç–ª–µ–∫—Ç–∏–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
    response += translate_message(elective_prompt, language)
    bot.send_message(chat_id, response)


@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_elective_selection(message):
    chat_id = message.chat.id
    unique_id = int(message.text)
    language = get_language(chat_id)
    elective_type = user_elective_selections.get(chat_id)

    if not elective_type:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–∫—Ç–∏–≤–æ–≤ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        return

    with Session() as session:
        elective = session.query(Elective).options(joinedload(Elective.reviews)).filter(
            Elective.unique_id == unique_id).first()

    if elective:
        response = f"**{elective.name}**\n\n{elective.description}\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n"
        response += "\n".join(f"{i}) {review.text}" for i, review in enumerate(elective.reviews[-5:], 1))
        response += "\n–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /electives –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."
        bot.send_message(chat_id, translate_message(response, language))
        user_reviews[chat_id] = unique_id
    else:
        bot.send_message(chat_id, "–≠–ª–µ–∫—Ç–∏–≤ —Å —Ç–∞–∫–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.message_handler(func=lambda message: message.chat.id in user_reviews)
def leave_review(message):
    chat_id = message.chat.id
    unique_id = user_reviews[chat_id]
    review_text = message.text
    user_name = message.from_user.username or message.from_user.first_name
    language = get_language(chat_id)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f'confirm_review_{unique_id}_{review_text}'))
    markup.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='cancel_review'))
    confirmation_message = f"–í–∞—à –æ—Ç–∑—ã–≤: '{review_text}'. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∑—ã–≤:"
    bot.send_message(chat_id, translate_message(confirmation_message, language), reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_review_'))
def confirm_review(call):
    chat_id = call.message.chat.id
    data = call.data.split('_')

    unique_id, review_text = data[2], '_'.join(data[3:])
    user_name = call.from_user.username or call.from_user.first_name

    with Session() as session:
        elective = session.query(Elective).filter(Elective.unique_id == int(unique_id)).first()

        if elective:
            new_review = Review(
                elective_id=elective.id,
                user_name=user_name,
                text=review_text,
                date_created=str(datetime.now())
            )
            session.add(new_review)
            session.commit()

    language = get_language(chat_id)
    bot.send_message(chat_id, translate_message("–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω!", language))
    user_reviews.pop(chat_id, None)


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_review')
def cancel_review(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, translate_message("–û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω.", get_language(chat_id)))
    user_reviews.pop(chat_id, None)


@bot.message_handler(commands=['help'])
def send_help(message):
    chat_id = message.chat.id
    help_text = (
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º —ç–ª–µ–∫—Ç–∏–≤–æ–≤. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/electives - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–∫—Ç–∏–≤—ã\n"
        "/language - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n"
    )
    bot.send_message(chat_id, translate_message(help_text, get_language(chat_id)))


if __name__ == '__main__':
    bot.polling(none_stop=True)
