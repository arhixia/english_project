from datetime import datetime
import telebot
from telebot import types
from sqlalchemy.orm import sessionmaker
from src.database import engine, SessionLocal  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from src.models import Elective, Review  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à—É –º–æ–¥–µ–ª—å Elective
from sqlalchemy import select
from src.config import TOKEN
from sqlalchemy.orm import joinedload


bot = telebot.TeleBot(TOKEN, parse_mode='None')

user_elective_selections = {}
last_selection = {}  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —ç–ª–µ–∫—Ç–∏–≤–æ–≤
user_languages = {}
user_reviews = {}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Session = sessionmaker(bind=engine)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    if chat_id not in user_languages:
        user_languages[chat_id] = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫

    language = user_languages[chat_id]  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if language == 'ru':
        bot.send_message(chat_id,
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —ç–ª–µ–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å –≤ –Ω–∞—à–µ–º –≤—É–∑–µ. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
            "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∫ —ç–ª–µ–∫—Ç–∏–≤–∞–º\n"
            "- –£–∑–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
            "- –û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –∫—É—Ä—Å–µ\n"
            "- –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è (–†—É—Å—Å–∫–∏–π –∏–ª–∏ English)\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /electives –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ /language –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –æ–±—â–µ–Ω–∏—è. "
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–µ–Ω—é –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )
    else:
        bot.send_message(chat_id,
            "Hello! üëã\n\n"
            "I am a bot that will help you choose an elective course at our university. Here‚Äôs what I can do:\n"
            "- View annotations for electives\n"
            "- Learn about the latest student reviews\n"
            "- Leave your review about a course\n"
            "- Choose the language of communication (–†—É—Å—Å–∫–∏–π or English)\n\n"
            "To get started, use the /electives command to view available courses or /language to change the language of communication. "
            "Click on the menu in the lower left corner to see possible commands."
        )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–∫—Ç–∏–≤–æ–≤ –ø–æ —Ç–∏–ø—É
def get_all_electives(elective_type: str, db: Session):
    stmt = select(Elective).where(Elective.elective_type == elective_type)
    electives = db.execute(stmt).scalars().all()
    return electives

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–∫—Ç–∏–≤–µ
def get_elective_info(elective_id: str, db: Session):
    stmt = select(Elective).options(joinedload(Elective.reviews)).where(Elective.unique_id == elective_id)
    elective = db.execute(stmt).scalars().first()
    if elective:
        return {
            'name': elective.name,
            'description': elective.description,
            'reviews': [review.text for review in elective.reviews]
        }
    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /electives –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–ª–µ–∫—Ç–∏–≤–æ–≤
@bot.message_handler(commands=['electives'])
def choose_elective_type(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìö PEP", callback_data='PEP'))
    markup.add(types.InlineKeyboardButton("üìñ RIM", callback_data='RIM'))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–∫—Ç–∏–≤–æ–≤:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–ª–µ–∫—Ç–∏–≤–æ–≤
@bot.callback_query_handler(func=lambda call: call.data in ['PEP', 'RIM'])
def handle_elective_type_selection(call):
    chat_id = call.message.chat.id
    user_elective_selections[chat_id] = call.data

    session = Session()
    electives = session.query(Elective).filter(Elective.elective_type == call.data).all()
    session.close()

    response = show_electives(electives)
    response += "\n\n–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —ç–ª–µ–∫—Ç–∏–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
    bot.send_message(chat_id, response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–∫—Ç–∏–≤–∞
@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_elective_selection(message):
    chat_id = message.chat.id
    unique_id = int(message.text)

    session = Session()
    elective_type = user_elective_selections.get(chat_id)

    if not elective_type:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–∫—Ç–∏–≤–æ–≤ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        session.close()
        return

    elective = session.query(Elective).options(joinedload(Elective.reviews)).filter(
        Elective.unique_id == unique_id).first()
    if elective:
        response = f"**{elective.name}**\n\n{elective.description}\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        for i, review in enumerate(elective.reviews[-5:], 1):
            response += f"{i}) {review.text}\n"

        response += "\n–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /electives –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."
        bot.send_message(chat_id, response)
        user_reviews[chat_id] = unique_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —ç–ª–µ–∫—Ç–∏–≤–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞
    else:
        bot.send_message(chat_id, "–≠–ª–µ–∫—Ç–∏–≤ —Å —Ç–∞–∫–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤
@bot.message_handler(func=lambda message: message.chat.id in user_reviews)
def leave_review(message):
    chat_id = message.chat.id
    unique_id = user_reviews[chat_id]
    review_text = message.text
    user_name = message.from_user.username or message.from_user.first_name

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f'confirm_review_{unique_id}_{review_text}'))
    markup.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='cancel_review'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∑—ã–≤
    bot.send_message(chat_id, f"–í–∞—à –æ—Ç–∑—ã–≤: '{review_text}'. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=markup)




# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_review_'))
def confirm_review(call):
    chat_id = call.message.chat.id
    data = call.data.split('_')

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —ç–ª–µ–∫—Ç–∏–≤–∞ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    if len(data) < 3:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Å–Ω–æ–≤–∞.")
        return

    unique_id = data[2]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã
    review_text = '_'.join(data[3:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞

    user_name = call.from_user.username or call.from_user.first_name

    session = Session()
    elective = session.query(Elective).filter(Elective.unique_id == int(unique_id)).first()

    if elective:
        new_review = Review(
            elective_id=elective.id,
            user_name=user_name,
            text=review_text,
            date_created=str(datetime.now())
        )
        session.add(new_review)
        session.commit()
        session.close()
        bot.send_message(chat_id, "–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω!")
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –≠–ª–µ–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–∫—Ç–∏–≤–µ
    del user_reviews[chat_id]




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–∑—ã–≤–∞
@bot.callback_query_handler(func=lambda call: call.data == 'cancel_review')
def cancel_review(call):
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "–û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å —ç–ª–µ–∫—Ç–∏–≤—ã –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /electives –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
    del user_reviews[chat_id]



def show_electives(electives):
    message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–∫—Ç–∏–≤—ã:\n"
    for elective in electives:
        message += f"{elective.unique_id}: {elective.name}\n"  # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    return message


bot.polling()
